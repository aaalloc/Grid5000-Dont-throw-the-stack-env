diff --git a/SConstruct b/SConstruct
index 57d0054..9eb4023 100644
--- a/SConstruct
+++ b/SConstruct
@@ -2,33 +2,35 @@
 import os
 import sys
 
-env = Environment(ENV = os.environ)
+env = Environment(ENV=os.environ)
 
 env['HAVE_POSIX_BARRIER'] = True
 
-env.Append(CPPPATH = ['/usr/local/include', '/opt/local/include'])
-env.Append(LIBPATH = ['/opt/local/lib'])
-env.Append(CCFLAGS = '-std=c++11 -D_GNU_SOURCE')
+env.Append(CPPPATH=['/usr/local/include', '/opt/local/include'])
+env.Append(LIBPATH=['/opt/local/lib'])
+env.Append(CCFLAGS='-std=c++11 -D_GNU_SOURCE')
 if sys.platform == 'darwin':
-    env['CC']  = 'clang'
+    env['CC'] = 'clang'
     env['CXX'] = 'clang++'
 
-conf = env.Configure(config_h = "config.h")
+conf = env.Configure(config_h="config.h")
 conf.Define("__STDC_FORMAT_MACROS")
 if not conf.CheckCXX():
-    print "A compiler with C++11 support is required."
+    print("A compiler with C++11 support is required.")
     Exit(1)
-print "Checking for gengetopt...",
+print("Checking for gengetopt...")
 if env.Execute("@which gengetopt &> /dev/null"):
-    print "not found (required)"
+    print("not found (required)")
     Exit(1)
-else: print "found"
+else:
+    print("found")
 if not conf.CheckLibWithHeader("event", "event2/event.h", "C++"):
-    print "libevent required"
+    print("libevent required")
     Exit(1)
-conf.CheckDeclaration("EVENT_BASE_FLAG_PRECISE_TIMER", '#include <event2/event.h>', "C++")
+conf.CheckDeclaration("EVENT_BASE_FLAG_PRECISE_TIMER",
+                      '#include <event2/event.h>', "C++")
 if not conf.CheckLibWithHeader("pthread", "pthread.h", "C++"):
-    print "pthread required"
+    print("pthread required")
     Exit(1)
 conf.CheckLib("rt", "clock_gettime", language="C++")
 conf.CheckLibWithHeader("zmq", "zmq.hpp", "C++")
@@ -37,15 +39,15 @@ if not conf.CheckFunc('pthread_barrier_init'):
 
 env = conf.Finish()
 
-env.Append(CFLAGS = ' -O3 -Wall -g')
-env.Append(CPPFLAGS = ' -O3 -Wall -g')
+env.Append(CFLAGS=' -O3 -Wall -g')
+env.Append(CPPFLAGS=' -O3 -Wall -g')
 
 env.Command(['cmdline.cc', 'cmdline.h'], 'cmdline.ggo', 'gengetopt < $SOURCE')
 
 src = Split("""mutilate.cc cmdline.cc log.cc distributions.cc util.cc
                Connection.cc Protocol.cc Generator.cc""")
 
-if not env['HAVE_POSIX_BARRIER']: # USE_POSIX_BARRIER:
+if not env['HAVE_POSIX_BARRIER']:  # USE_POSIX_BARRIER:
     src += ['barrier.cc']
 
 env.Program(target='mutilate', source=src)
